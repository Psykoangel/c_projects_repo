Etape 1 :  Chercher plus petit des T [0...n]
			le placer en 0

			-5	13	9	69	12	5275	24

Etape 2 :  Chercher plus petit des T [1...n]
			le placer en 1

			-5	9	13	 69	12	5275	24

Etape 3 :  Chercher plus petit des T [2...n]
			le placer en 2

			-5  9  12  69  13  5275  24


Etape 4 :  Chercher plus petit des T [3...n]
			le placer en 3

			-5  9  12  13  69  5275  24

Etape 5 :  Chercher plus petit des T [4...n]
			le placer en 4

			-5  9  12  13  24  5275  69

Etape 6 :  Chercher plus petit des T [5...n]
			le placer en 5

			-5  9  12  13  24   69  5275

Etape 7 :  Chercher plus petit des T [6...n]
			le placer en 6



// pour i = n  faire : Chercher le plus petit dans T[i+1) - n ] , le placer en i + 1  //


Pour i=1 a n faire
chercher le plus petit dans T[(i-1)p - n] le placer en (i-1)
fin pour

=> chercher le plus petit dans T[p...q]

etape 1 :


initialisation : indice <- p


		if T[indice] > T[p+1]
		alors indice <- p+1

		if T[indice] > T[p+2]
		alors indice <- p+2
...........................................
		if T[indice] > T[p+j]
		alors indice <- p+j

		etape (q-p) :   if T[indice] > T[q]
		alors indice <- q

		T[p...q] chercher l'indice du plus petit
indice <- p

pour j=1 a (q_p) faire

	si T[indice] > T[p+j] alors indice <- p+j
	finsi
finpour

===============

=================

Pour i=1 a n faire
indice <-(i-1)
	pour j= 1 a n-(i-1) faire
		si T[indice] > T[i-1+j]
		alors indice <- i-1+j
		finsi
	finpour

=================

ALGORITHME : tri selectif

VAR

T[0..200]:entier
i,j:entier   //variables de parcours de tableau
n:entier     //cense etre egal a 200
indice:entier    //contient l'indice de la case contenant la valeur la plus petite
tmp:entier       //temporaire

DEBUT

pour i=1 a n faire
	//recherche de la plus petite valeur
	indice <-- (i-1)
	pour j=1 a n-(i-1) faire
		si T[indice] > T[i-1 + j]
		alors indice <-- i - 1 + j
		finsi
	finpour

	//echange de valeur
	tmp <-- T[i-1]
	T[i-1] <-- T[indice]
	T[indice] <-- tmp

finpour

FIN



**********************************

occurences
etape 1 :
	si T[0]=0 cpt0 <- cpt0 + 1
	si T[0]=1 cpt1 <- cpt1 + 1
	.
	:

	si T[0]=9 cpt9 <- cpt9 + 1


etape 2 :
	si T[1]=0 cpt0 <- cpt0 + 1
	si T[1]=1 cpt1 <- cpt1 + 1
	.
	.
	.
	si T[1]=9 cpt9 <- cpt9 + 1

etape 3 :
	si T[2]=0 cpt0 <- cpt0 + 1

.
.
.
.

etape i :
	si T[i]=0 cpt0 <- cpt0 + 1

....

1 000 000 000


ALGO :


cpt0 = 0
cpt1 = 0
....
cpt9 = 0

pour i=1 a 1 000 000 000 faire
	si T[i-1]=0 alors cpt0<-cpt0+1
	.....

	si T[i-1]=9 alors cpt9<-cpt9+1
finpour

ALGO 2 :

cpt[0 ... 9]: ENTIER

DEBUT
pour i=0 a 9 faire
	cpt[i]=0
finpour

pour i=1 a 1 000 000 000 faire
	si T[i-1]=0 alors cpt[0]= cpt[0]+1

/////////////////////////////////////////////////////////////////////////////////////////////////


main()
{
int	T[500]={0,2,3..........};
int cpt[10]={0,0,0,0,0,0,0,0};
int i;
for (i=0; i <500; cpt[T[i++]]+=,1);
for	(i=0; i<10; printf("nombre de %d=%d\n,i,cpt[i]),i++);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////

etape 1 : inserer t[i] dans t[0...0]
etape 2 : inserer t[i] dans t[0...1]
etape 3 : inserer t[i] dans t[1...2]
etape i : inserer t[] dans t[0...i]
etape n-1 : inserer t[n-1] dans t[0...n-2]

POUR i=1 a n-1 FAIRE inserrer t[i] dans t[0...i-1]
FINPOUR

etape 1 : si T[N+1]>= T[N]
alors on arrete
sinon tmp <-- T[N-1]

...............


//////////////////

pour i=1 a (n-1) faire j=1
tantque((j<=(i-1)) et T [i-j] < T[i-j-1])
Faire tmp <-- T[i-j]
	  T[i-j] <-- T [i-j-1]
		   T[i-j-1] <-- tmp
			  j <-- j+ 1
fin tanque
finpour
